generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  USER
  ADMIN
}

enum StatusType {
  CONFIRMED
  CANCELLED
}

enum CourseType {
  INDIVIDUAL
  COLLECTIVE
}

enum AppType {
  ADMIN
  MOBILE
}

enum LogType {
  ADD
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PAYMENT
  PASSWORD_RESET
  RESERVATION
  CANCELLATION
  OTHER
}

model User {
  id        String    @id @default(uuid())
  role      RoleType
  firstname String
  lastname  String
  email     String    @unique
  password  String
  tel       String?
  dob       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  reservations Reservation[]
  Wallet       Wallet[]
  Log          Log[]
}

model Reservation {
  id        String     @id @default(uuid())
  userId    String
  sessionId String
  status    StatusType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  session Session @relation(fields: [sessionId], references: [id])
}

model TypeCourse {
  id         String     @id @default(uuid())
  label      String
  typeCourse CourseType
  capacity   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  packs    Pack[]
  sessions Session[]
  Wallet   Wallet[]
}

model Session {
  id           String   @id @default(uuid())
  typeCourseId String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  typeCourse  TypeCourse    @relation(fields: [typeCourseId], references: [id])
  Reservation Reservation[]
}

model Pack {
  id           String   @id @default(uuid())
  typeCourseId String
  label        String
  nbCourse     Int
  price        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  typeCourse TypeCourse @relation(fields: [typeCourseId], references: [id])
}

model Wallet {
  id           String   @id @default(uuid())
  userId       String
  typeCourseId String
  balance      Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  typeCourse TypeCourse @relation(fields: [typeCourseId], references: [id])

  @@unique([userId, typeCourseId])
}

model Log {
  id        String   @id @default(uuid())
  appType   AppType
  logType   LogType
  userId    String
  message   String
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}
